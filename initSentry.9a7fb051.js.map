{"mappings":"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","sources":["src/initSentry.ts","node_modules/@sentry/src/sdk.ts","node_modules/@sentry/src/integrations/functiontostring.ts","node_modules/@sentry/src/browser.ts","node_modules/@sentry/src/global.ts","node_modules/@sentry/src/node.ts","node_modules/@sentry/src/env.ts","node_modules/@sentry/src/is.ts","node_modules/@sentry/src/dsn.ts","node_modules/@sentry/src/error.ts","node_modules/@sentry/src/instrument.ts","node_modules/@sentry/src/logger.ts","node_modules/@sentry/src/object.ts","node_modules/@sentry/src/string.ts","node_modules/@sentry/src/stacktrace.ts","node_modules/@sentry/src/buildPolyfills/_nullishCoalesce.ts","node_modules/@sentry/src/buildPolyfills/_optionalChain.ts","node_modules/@sentry/src/supports.ts","node_modules/@sentry/src/misc.ts","node_modules/@sentry/src/normalize.ts","node_modules/@sentry/src/memo.ts","node_modules/@sentry/src/promisebuffer.ts","node_modules/@sentry/src/syncpromise.ts","node_modules/@sentry/src/severity.ts","node_modules/@sentry/src/time.ts","node_modules/@sentry/src/tracing.ts","node_modules/@sentry/src/envelope.ts","node_modules/@sentry/src/clientreport.ts","node_modules/@sentry/src/ratelimit.ts","node_modules/@sentry/src/baggage.ts","node_modules/@sentry/src/url.ts","node_modules/@sentry/src/integrations/inboundfilters.ts","node_modules/@sentry/src/scope.ts","node_modules/@sentry/src/session.ts","node_modules/@sentry/src/hub.ts","node_modules/@sentry/src/exports.ts","node_modules/@sentry/src/api.ts","node_modules/@sentry/src/baseclient.ts","node_modules/@sentry/src/integration.ts","node_modules/@sentry/src/transports/base.ts","node_modules/src/integrations/globalhandlers.ts","node_modules/src/eventbuilder.ts","node_modules/src/helpers.ts","node_modules/src/integrations/trycatch.ts","node_modules/src/integrations/breadcrumbs.ts","node_modules/src/integrations/linkederrors.ts","node_modules/src/integrations/httpcontext.ts","node_modules/src/integrations/dedupe.ts","node_modules/src/sdk.ts","node_modules/src/client.ts","node_modules/src/transports/utils.ts","node_modules/src/stack-parsers.ts","node_modules/src/transports/fetch.ts","node_modules/src/transports/xhr.ts","node_modules/src/index.ts","node_modules/src/hubextensions.ts","node_modules/src/errors.ts","node_modules/src/utils.ts","node_modules/src/idletransaction.ts","node_modules/src/browser/browsertracing.ts","node_modules/src/browser/backgroundtab.ts","node_modules/src/browser/metrics/index.ts","node_modules/src/browser/web-vitals/getCLS.ts","node_modules/src/browser/web-vitals/lib/bindReporter.ts","node_modules/src/browser/web-vitals/lib/generateUniqueID.ts","node_modules/src/browser/web-vitals/lib/observe.ts","node_modules/src/browser/web-vitals/lib/onHidden.ts","node_modules/src/browser/web-vitals/getFID.ts","node_modules/src/browser/web-vitals/lib/getVisibilityWatcher.ts","node_modules/src/browser/web-vitals/getLCP.ts","node_modules/src/browser/metrics/utils.ts","node_modules/src/browser/request.ts","node_modules/src/browser/router.ts"],"sourcesContent":["import * as Sentry from '@sentry/react';\nimport { BrowserTracing } from '@sentry/tracing';\nimport { config } from './config';\n\nexport function initSentry() {\n  if (config.sentryDsn && config.sentryDsn !== '') {\n    Sentry.init({\n      dsn: config.sentryDsn,\n      integrations: [new BrowserTracing()],\n      tracesSampleRate: 1.0,\n      debug: false,\n    });\n  } else {\n    console.warn(\n      'SENTRY_DSN is undefined. Sentry is not initialized. Check environments variables',\n    );\n  }\n}\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, ClientOptions } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): void {\n  if (options.debug === true) {\n    if (__DEBUG_BUILD__) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  const global = getGlobalObject<Window>();\n  if (global.document && global.document.querySelector) {\n    return global.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `getGlobalObject`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof SentryGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const global = (obj || getGlobalObject()) as SentryGlobal;\n  const __SENTRY__ = (global.__SENTRY__ = global.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n","/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These fags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents\n */\nexport function dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!__DEBUG_BUILD__) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}\n","import type { ConsoleLevel } from './logger';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { isInstanceOf, isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      __DEBUG_BUILD__ && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      const xhrInfo: SentryWrappedXMLHttpRequest['__sentry_xhr__'] = (xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function (): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount -= 1;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","import { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject, getGlobalSingleton } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = typeof CONSOLE_LEVELS[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            global.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V extends unknown>(\n  value: V,\n):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n","import { StackFrame, StackLineParser, StackLineParserFn, StackParser } from '@sentry/types';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n\n    for (const line of stack.split('\\n').slice(skipFirst)) {\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = line.replace(/\\(error: (.*)\\)/, '$1');\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: StackFrame[]): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].function || '';\n  const lastFrameFunction = localStack[localStack.length - 1].function || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(frame => ({\n      ...frame,\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?',\n    }))\n    .reverse();\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\ntype GetModuleFn = (filename: string | undefined) => string | undefined;\n\n// eslint-disable-next-line complexity\nfunction node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    const lineMatch = line.match(FULL_MATCH);\n    if (!lineMatch) {\n      return undefined;\n    }\n\n    let object: string | undefined;\n    let method: string | undefined;\n    let functionName: string | undefined;\n    let typeName: string | undefined;\n    let methodName: string | undefined;\n\n    if (lineMatch[1]) {\n      functionName = lineMatch[1];\n\n      let methodStart = functionName.lastIndexOf('.');\n      if (functionName[methodStart - 1] === '.') {\n        // eslint-disable-next-line no-plusplus\n        methodStart--;\n      }\n\n      if (methodStart > 0) {\n        object = functionName.substr(0, methodStart);\n        method = functionName.substr(methodStart + 1);\n        const objectEnd = object.indexOf('.Module');\n        if (objectEnd > 0) {\n          functionName = functionName.substr(objectEnd + 1);\n          object = object.substr(0, objectEnd);\n        }\n      }\n      typeName = undefined;\n    }\n\n    if (method) {\n      typeName = object;\n      methodName = method;\n    }\n\n    if (method === '<anonymous>') {\n      methodName = undefined;\n      functionName = undefined;\n    }\n\n    if (functionName === undefined) {\n      methodName = methodName || '<anonymous>';\n      functionName = typeName ? `${typeName}.${methodName}` : methodName;\n    }\n\n    const filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].substr(7) : lineMatch[2];\n    const isNative = lineMatch[5] === 'native';\n    const isInternal =\n      isNative || (filename && !filename.startsWith('/') && !filename.startsWith('.') && filename.indexOf(':\\\\') !== 1);\n\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    const in_app = !isInternal && filename !== undefined && !filename.includes('node_modules/');\n\n    return {\n      filename,\n      module: getModule?.(filename),\n      function: functionName,\n      lineno: parseInt(lineMatch[3], 10) || undefined,\n      colno: parseInt(lineMatch[4], 10) || undefined,\n      in_app,\n    };\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n","/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nexport function _nullishCoalesce(lhs: unknown, rhsFn: () => unknown): unknown {\n  // by checking for loose equality to `null`, we catch both `null` and `undefined`\n  return lhs != null ? lhs : rhsFn();\n}\n\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n","import { GenericFunction } from './types';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nexport function _optionalChain(ops: unknown[]): unknown {\n  let lastAccessLHS: unknown = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i] as string;\n    const fn = ops[i + 1] as (intermediateValue: unknown) => unknown;\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args: unknown[]) => (value as GenericFunction).call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n","import { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/** Many browser now support native uuid v4 generation */\ninterface CryptoWithRandomUUID extends Crypto {\n  randomUUID?(): string;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = (global.crypto || global.msCrypto) as CryptoWithRandomUUID;\n\n  if (crypto && crypto.randomUUID) {\n    return crypto.randomUUID().replace(/-/g, '');\n  }\n\n  const getRandomByte =\n    crypto && crypto.getRandomValues ? () => crypto.getRandomValues(new Uint8Array(1))[0] : () => Math.random() * 16;\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nexport function arrayify<T = unknown>(maybeArray: T | T[]): T[] {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n","import { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (value === null || (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We're also done if we've reached the max depth\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, depth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n\n    numAdded += 1;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n    if (value === void 0) {\n      return '[undefined]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    return `[object ${(Object.getPrototypeOf(value) as Prototype).constructor.name}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n","import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          // eslint-disable-next-line no-plusplus\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","/* eslint-disable deprecation/deprecation */\nimport { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n","import { getGlobalObject } from './global';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","import { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n","import {\n  Baggage,\n  DsnComponents,\n  DynamicSamplingContext,\n  Event,\n  EventEnvelope,\n  EventEnvelopeHeaders,\n  EventItem,\n  SdkInfo,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dropUndefinedKeys, dsnToString, getSentryBaggageItems } from '@sentry/utils';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(metadata?: SdkMetadata): SdkInfo | undefined {\n  if (!metadata || !metadata.sdk) {\n    return;\n  }\n  const { name, version } = metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  dsn: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): SessionEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem: SessionItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session];\n\n  return createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nexport function createEventEnvelope(\n  event: Event,\n  dsn: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const eventType = event.type || 'event';\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem: EventItem = [\n    {\n      type: eventType,\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n    },\n    event,\n  ];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\nfunction createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const baggage: Baggage | undefined = event.sdkProcessingMetadata && event.sdkProcessingMetadata.baggage;\n  const dynamicSamplingContext = baggage && getSentryBaggageItems(baggage);\n\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(event.type === 'transaction' &&\n      dynamicSamplingContext && {\n        trace: dropUndefinedKeys({ ...dynamicSamplingContext }) as DynamicSamplingContext,\n      }),\n  };\n}\n","import { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","import { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n","import { Baggage, BaggageObj, HttpHeaderValue, TraceparentData } from '@sentry/types';\n\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/** Create an instance of Baggage */\nexport function createBaggage(initItems: BaggageObj, baggageString: string = '', mutable: boolean = true): Baggage {\n  return [{ ...initItems }, baggageString, mutable];\n}\n\n/** Get a value from baggage */\nexport function getBaggageValue(baggage: Baggage, key: keyof BaggageObj): BaggageObj[keyof BaggageObj] {\n  return baggage[0][key];\n}\n\n/** Add a value to baggage */\nexport function setBaggageValue(baggage: Baggage, key: keyof BaggageObj, value: BaggageObj[keyof BaggageObj]): void {\n  if (isBaggageMutable(baggage)) {\n    baggage[0][key] = value;\n  }\n}\n\n/** Check if the Sentry part of the passed baggage (i.e. the first element in the tuple) is empty */\nexport function isSentryBaggageEmpty(baggage: Baggage): boolean {\n  return Object.keys(baggage[0]).length === 0;\n}\n\n/** Returns Sentry specific baggage values */\nexport function getSentryBaggageItems(baggage: Baggage): BaggageObj {\n  return baggage[0];\n}\n\n/**\n * Returns 3rd party baggage string of @param baggage\n * @param baggage\n */\nexport function getThirdPartyBaggage(baggage: Baggage): string {\n  return baggage[1];\n}\n\n/**\n * Checks if baggage is mutable\n * @param baggage\n * @returns true if baggage is mutable, else false\n */\nexport function isBaggageMutable(baggage: Baggage): boolean {\n  return baggage[2];\n}\n\n/**\n * Sets the passed baggage immutable\n * @param baggage\n */\nexport function setBaggageImmutable(baggage: Baggage): void {\n  baggage[2] = false;\n}\n\n/** Serialize a baggage object */\nexport function serializeBaggage(baggage: Baggage): string {\n  return Object.keys(baggage[0]).reduce((prev, key: keyof BaggageObj) => {\n    const val = baggage[0][key] as string;\n    const baggageEntry = `${SENTRY_BAGGAGE_KEY_PREFIX}${encodeURIComponent(key)}=${encodeURIComponent(val)}`;\n    const newVal = prev === '' ? baggageEntry : `${prev},${baggageEntry}`;\n    if (newVal.length > MAX_BAGGAGE_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`Not adding key: ${key} with val: ${val} to baggage due to exceeding baggage size limits.`);\n      return prev;\n    } else {\n      return newVal;\n    }\n  }, baggage[1]);\n}\n\n/**\n * Parse a baggage header from a string or a string array and return a Baggage object\n *\n * If @param includeThirdPartyEntries is set to true, third party baggage entries are added to the Baggage object\n * (This is necessary for merging potentially pre-existing baggage headers in outgoing requests with\n * our `sentry-` values)\n */\nexport function parseBaggageHeader(\n  inputBaggageValue: HttpHeaderValue,\n  includeThirdPartyEntries: boolean = false,\n): Baggage {\n  // Adding this check here because we got reports of this function failing due to the input value\n  // not being a string. This debug log might help us determine what's going on here.\n  if ((!Array.isArray(inputBaggageValue) && !isString(inputBaggageValue)) || typeof inputBaggageValue === 'number') {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        '[parseBaggageHeader] Received input value of incompatible type: ',\n        typeof inputBaggageValue,\n        inputBaggageValue,\n      );\n\n    // Gonna early-return an empty baggage object so that we don't fail later on\n    return createBaggage({}, '');\n  }\n\n  const baggageEntries = (isString(inputBaggageValue) ? inputBaggageValue : inputBaggageValue.join(','))\n    .split(',')\n    .map(entry => entry.trim())\n    .filter(entry => entry !== '' && (includeThirdPartyEntries || SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(entry)));\n\n  return baggageEntries.reduce(\n    ([baggageObj, baggageString], curr) => {\n      const [key, val] = curr.split('=');\n      if (SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(key)) {\n        const baggageKey = decodeURIComponent(key.split('-')[1]);\n        return [\n          {\n            ...baggageObj,\n            [baggageKey]: decodeURIComponent(val),\n          },\n          baggageString,\n          true,\n        ];\n      } else {\n        return [baggageObj, baggageString === '' ? curr : `${baggageString},${curr}`, true];\n      }\n    },\n    [{}, '', true],\n  );\n}\n\n/**\n * Merges the baggage header we saved from the incoming request (or meta tag) with\n * a possibly created or modified baggage header by a third party that's been added\n * to the outgoing request header.\n *\n * In case @param headerBaggageString exists, we can safely add the the 3rd party part of @param headerBaggage\n * with our @param incomingBaggage. This is possible because if we modified anything beforehand,\n * it would only affect parts of the sentry baggage (@see Baggage interface).\n *\n * @param incomingBaggage the baggage header of the incoming request that might contain sentry entries\n * @param thirdPartyBaggageHeader possibly existing baggage header string or string[] added from a third\n *        party to the request headers\n *\n * @return a merged and serialized baggage string to be propagated with the outgoing request\n */\nexport function mergeAndSerializeBaggage(incomingBaggage?: Baggage, thirdPartyBaggageHeader?: HttpHeaderValue): string {\n  if (!incomingBaggage && !thirdPartyBaggageHeader) {\n    return '';\n  }\n\n  const headerBaggage = (thirdPartyBaggageHeader && parseBaggageHeader(thirdPartyBaggageHeader, true)) || undefined;\n  const thirdPartyHeaderBaggage = headerBaggage && getThirdPartyBaggage(headerBaggage);\n\n  const finalBaggage = createBaggage((incomingBaggage && incomingBaggage[0]) || {}, thirdPartyHeaderBaggage || '');\n  return serializeBaggage(finalBaggage);\n}\n\n/**\n * Helper function that takes a raw baggage value (if available) and the processed sentry-trace header\n * data (if available), parses the baggage value and creates a Baggage object. If there is no baggage\n * value, it will create an empty Baggage object.\n *\n * In a second step, this functions determines if the created Baggage object should be set immutable\n * to prevent mutation of the Sentry data. It does this by looking at the processed sentry-trace header.\n *\n * @param rawBaggageValue baggage value from header\n * @param sentryTraceHeader processed Sentry trace header returned from `extractTraceparentData`\n */\nexport function parseBaggageSetMutability(\n  rawBaggageValue: HttpHeaderValue | false | undefined,\n  sentryTraceHeader: TraceparentData | string | false | undefined | null,\n): Baggage {\n  const baggage = parseBaggageHeader(rawBaggageValue || '');\n\n  // Because we are always creating a Baggage object by calling `parseBaggageHeader` above\n  // (either a filled one or an empty one, even if we didn't get a `baggage` header),\n  // we only need to check if we have a sentry-trace header or not. As soon as we have it,\n  // we set baggage immutable. In case we don't get a sentry-trace header, we can assume that\n  // this SDK is the head of the trace and thus we still permit mutation at this time.\n  // There is one exception though, which is that we get a baggage-header with `sentry-`\n  // items but NO sentry-trace header. In this case we also set the baggage immutable for now\n  // but if something like this would ever happen, we should revisit this and determine\n  // what this would actually mean for the trace (i.e. is this SDK the head?, what happened\n  // before that we don't have a sentry-trace header?, etc)\n  (sentryTraceHeader || !isSentryBaggageEmpty(baggage)) && setBaggageImmutable(baggage);\n\n  return baggage;\n}\n","/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n","import { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcess: EventProcessor = (event: Event) => {\n      const hub = getCurrentHub();\n      if (hub) {\n        const self = hub.getIntegration(InboundFilters);\n        if (self) {\n          const client = hub.getClient();\n          const clientOptions = client ? client.getOptions() : {};\n          const options = _mergeOptions(self._options, clientOptions);\n          return _shouldDropEvent(event, options) ? null : event;\n        }\n      }\n      return event;\n    };\n\n    eventProcess.id = this.name;\n    addGlobalEventProcessor(eventProcess);\n  }\n}\n\n/** JSDoc */\nexport function _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...DEFAULT_IGNORE_ERRORS,\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message =>\n    ignoreErrors.some(pattern => isMatchingPattern(message, pattern)),\n  );\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : denyUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : allowUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    try {\n      const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n      return [`${value}`, `${type}: ${value}`];\n    } catch (oO) {\n      __DEBUG_BUILD__ && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    let frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    __DEBUG_BUILD__ && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n","/* eslint-disable max-lines */\nimport {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  arrayify,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction && this._span.transaction.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalObject,\n  getGlobalSingleton,\n  isNodeEnv,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const global = getGlobalObject<{ navigator?: { userAgent?: string } }>();\n    const { userAgent } = global.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        updateSession(currentSession, { status: 'exited' });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope | undefined) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n","import {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  SeverityLevel,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\nimport { getCurrentHub, Hub } from './hub';\nimport { Scope } from './scope';\n\n// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @param captureContext Additional scope data to apply to exception event.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): ReturnType<Hub['captureException']> {\n  return getCurrentHub().captureException(exception, { captureContext });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  captureContext?: CaptureContext | Severity | SeverityLevel,\n): ReturnType<Hub['captureMessage']> {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event, hint?: EventHint): ReturnType<Hub['captureEvent']> {\n  return getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): ReturnType<Hub['configureScope']> {\n  getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): ReturnType<Hub['addBreadcrumb']> {\n  getCurrentHub().addBreadcrumb(breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): ReturnType<Hub['setContext']> {\n  getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): ReturnType<Hub['setExtras']> {\n  getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): ReturnType<Hub['setExtra']> {\n  getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): ReturnType<Hub['setTags']> {\n  getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): ReturnType<Hub['setTag']> {\n  getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): ReturnType<Hub['setUser']> {\n  getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): ReturnType<Hub['withScope']> {\n  getCurrentHub().withScope(callback);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): ReturnType<Hub['startTransaction']> {\n  return getCurrentHub().startTransaction(\n    {\n      metadata: { source: 'custom' },\n      ...context,\n    },\n    customSamplingContext,\n  );\n}\n","import { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","/* eslint-disable max-lines */\nimport { Scope, updateSession } from '@sentry/hub';\nimport {\n  Client,\n  ClientOptions,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  Event,\n  EventDropReason,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Outcome,\n  Session,\n  SessionAggregates,\n  Severity,\n  SeverityLevel,\n  Transport,\n} from '@sentry/types';\nimport {\n  addItemToEnvelope,\n  checkOrSetAlreadyCaught,\n  createAttachmentEnvelopeItem,\n  dateTimestampInSeconds,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  normalize,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<O extends ClientOptions> implements Client<O> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Indicates whether this client's integrations have been set up. */\n  protected _integrationsInitialized: boolean = false;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number } = {};\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.warn('No DSN provided, client will not do anything.');\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this.eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n    scope?: Scope,\n  ): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(String(message), level, hint)\n      : this.eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      __DEBUG_BUILD__ && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrationsInitialized) {\n      this._integrations = setupIntegrations(this._options.integrations);\n      this._integrationsInitialized = true;\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   */\n  public getIntegrationById(integrationId: string): Integration | undefined {\n    return this._integrations[integrationId];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    if (this._dsn) {\n      let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n      for (const attachment of hint.attachments || []) {\n        env = addItemToEnvelope(\n          env,\n          createAttachmentEnvelopeItem(\n            attachment,\n            this._options.transportOptions && this._options.transportOptions.textEncoder,\n          ),\n        );\n      }\n\n      this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    if (this._dsn) {\n      const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n      this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory): void {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      __DEBUG_BUILD__ && logger.log(`Adding outcome: \"${key}\"`);\n\n      // The following works because undefined + 1 === NaN and NaN is falsy\n      this._outcomes[key] = this._outcomes[key] + 1 || 1;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || hint.event_id || uuid4(),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = resolvedSyncPromise<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // Collect attachments from the hint and scope\n      const attachments = [...(hint.attachments || []), ...finalScope.getAttachments()];\n\n      if (attachments.length) {\n        hint.attachments = attachments;\n      }\n\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized: Event = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth, maxBreadth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth, maxBreadth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth),\n      }),\n    };\n\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace && normalized.contexts) {\n      normalized.contexts.trace = event.contexts.trace;\n\n      // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n      if (event.contexts.trace.data) {\n        normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n      }\n    }\n\n    // event.spans[].data may contain circular/dangerous data so we need to normalize it\n    if (event.spans) {\n      normalized.spans = event.spans.map(span => {\n        // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n        if (span.data) {\n          span.data = normalize(span.data, depth, maxBreadth);\n        }\n        return span;\n      });\n    }\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint: EventHint = {}, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (__DEBUG_BUILD__) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          const sentryError = reason as SentryError;\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event> {\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.', 'log'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n          'log',\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, hint, scope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', event.type || 'error');\n          throw new SentryError('An event processor returned null, will not send event.', 'log');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', event.type || 'error');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.', 'log');\n        }\n\n        const session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): void {\n    if (this._transport && this._dsn) {\n      this._transport.send(envelope).then(null, reason => {\n        __DEBUG_BUILD__ && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public abstract eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * @inheritDoc\n   */\n  public abstract eventFromMessage(\n    _message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    _level?: Severity | SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\nfunction _ensureBeforeSendRv(rv: PromiseLike<Event | null> | Event | null): PromiseLike<Event | null> | Event | null {\n  const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n  if (isThenable(rv)) {\n    return rv.then(\n      event => {\n        if (!(isPlainObject(event) || event === null)) {\n          throw new SentryError(nullErr);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`beforeSend rejected with ${e}`);\n      },\n    );\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n  return rv;\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach(integration => {\n    integrationIndex[integration.name] = integration;\n\n    if (installedIntegrations.indexOf(integration.name) === -1) {\n      integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n      installedIntegrations.push(integration.name);\n      __DEBUG_BUILD__ && logger.log(`Integration installed: ${integration.name}`);\n    }\n  });\n\n  return integrationIndex;\n}\n","import {\n  Envelope,\n  EnvelopeItem,\n  EventDropReason,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  resolvedSyncPromise,\n  SentryError,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void> = makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE),\n): Transport {\n  let rateLimits: RateLimits = {};\n\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (_, type) => {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    const requestTask = (): PromiseLike<void> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            __DEBUG_BUILD__ && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n        },\n        error => {\n          __DEBUG_BUILD__ && logger.error('Failed while sending event:', error);\n          recordEnvelopeLoss('network_error');\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          __DEBUG_BUILD__ && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  __DEBUG_BUILD__ && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndOptions(): [Hub, StackParser, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\n","import { Event, EventHint, Exception, Severity, SeverityLevel, StackFrame, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nexport function exceptionFromError(stackParser: StackParser, ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  stackParser: StackParser,\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      (event.exception as { values: Exception[] }).values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(stackParser: StackParser, ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(\n  stackParser: StackParser,\n  ex: Error & { framesToPop?: number; stacktrace?: string },\n): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  stackParser: StackParser,\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(stackParser, errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(stackParser, exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  stackParser: StackParser,\n  input: string,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: input, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  return event;\n}\n","import { captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getOriginalFunction,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped: WrappedFunction = function (this: unknown): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject, getOriginalFunction } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const global = getGlobalObject() as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = global[target] && global[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: 'error',\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** HttpContext integration collects information about HTTP request headers */\nexport class HttpContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'HttpContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = HttpContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (global.location && global.location.href);\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcessor: EventProcessor = currentEvent => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            __DEBUG_BUILD__ && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    };\n\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n","import {\n  getCurrentHub,\n  getIntegrationsToSetup,\n  getReportDialogEndpoint,\n  Hub,\n  initAndBind,\n  Integrations as CoreIntegrations,\n} from '@sentry/core';\nimport {\n  addInstrumentationHandler,\n  getGlobalObject,\n  logger,\n  resolvedSyncPromise,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/utils';\n\nimport { BrowserClient, BrowserClientOptions, BrowserOptions } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, HttpContext, LinkedErrors, TryCatch } from './integrations';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport, makeXHRTransport } from './transports';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new HttpContext(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport),\n  };\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}, hub: Hub = getCurrentHub()): void {\n  // doesn't work without a document (React Native)\n  const global = getGlobalObject<Window>();\n  if (!global.document) {\n    __DEBUG_BUILD__ && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  const { client, scope } = hub.getStackTop();\n  const dsn = options.dsn || (client && client.getDsn());\n  if (!dsn) {\n    __DEBUG_BUILD__ && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n\n  const script = global.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = global.document.head || global.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    __DEBUG_BUILD__ && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    __DEBUG_BUILD__ &&\n      logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n","import { BaseClient, getCurrentHub, getEnvelopeEndpointWithUrlEncodedAuth, Scope, SDK_VERSION } from '@sentry/core';\nimport { ClientOptions, Event, EventHint, Options, Severity, SeverityLevel } from '@sentry/types';\nimport {\n  createClientReportEnvelope,\n  dsnToString,\n  getEventDescription,\n  getGlobalObject,\n  logger,\n  serializeEnvelope,\n} from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport { BrowserTransportOptions } from './transports/types';\nimport { sendReport } from './transports/utils';\n\nconst globalObject = getGlobalObject<Window>();\n\nexport interface BaseBrowserOptions {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n}\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport interface BrowserOptions extends Options<BrowserTransportOptions>, BaseBrowserOptions {}\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport interface BrowserClientOptions extends ClientOptions<BrowserTransportOptions>, BaseBrowserOptions {}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && globalObject.document) {\n      globalObject.document.addEventListener('visibilitychange', () => {\n        if (globalObject.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | null;\n    if (\n      breadcrumbIntegration &&\n      // We check for definedness of `options`, even though it is not strictly necessary, because that access to\n      // `.sentry` below does not throw, in case users provided their own integration with id \"Breadcrumbs\" that does\n      // not have an`options` field\n      breadcrumbIntegration.options &&\n      breadcrumbIntegration.options.sentry\n    ) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, this._options);\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    try {\n      sendReport(url, serializeEnvelope(envelope));\n    } catch (e) {\n      __DEBUG_BUILD__ && logger.error(e);\n    }\n  }\n}\n","import { getGlobalObject, isNativeFetch, logger, supportsFetch } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet cachedFetchImpl: FetchImpl;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(global.fetch)) {\n    return (cachedFetchImpl = global.fetch.bind(global));\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(global));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nexport function sendReport(url: string, body: string | Uint8Array): void {\n  const isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n  const hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n    sendBeacon(url, body);\n  } else if (supportsFetch()) {\n    const fetch = getNativeFetchImplementation();\n    fetch(url, {\n      body,\n      method: 'POST',\n      credentials: 'omit',\n      keepalive: true,\n    }).then(null, error => {\n      __DEBUG_BUILD__ && logger.error(error);\n    });\n  }\n}\n","import { StackFrame, StackLineParser, StackLineParserFn } from '@sentry/types';\nimport { createStackParser } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true,\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.*\\).*?|.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|safari-extension|safari-web-extension|capacitor)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex =\n  /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\n\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n","import { createTransport } from '@sentry/core';\nimport { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\n\nimport { BrowserTransportOptions } from './types';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return nativeFetch(options.url, requestOptions).then(response => ({\n      statusCode: response.status,\n      headers: {\n        'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n        'retry-after': response.headers.get('Retry-After'),\n      },\n    }));\n  }\n\n  return createTransport(options, makeRequest);\n}\n","import { createTransport } from '@sentry/core';\nimport { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\nimport { BrowserTransportOptions } from './types';\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nconst XHR_READYSTATE_DONE = 4;\n\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nexport function makeXHRTransport(options: BrowserTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    return new SyncPromise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onerror = reject;\n\n      xhr.onreadystatechange = (): void => {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          resolve({\n            statusCode: xhr.status,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After'),\n            },\n          });\n        }\n      };\n\n      xhr.open('POST', options.url);\n\n      for (const header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n\n      xhr.send(request.body);\n    });\n  }\n\n  return createTransport(options, makeRequest);\n}\n","import { addExtensionMethods } from './hubextensions';\nimport * as Integrations from './integrations';\n\nexport type { RequestInstrumentationOptions } from './browser';\nexport type { SpanStatusType } from './span';\n\nexport { Integrations };\n\n// This is already exported as part of `Integrations` above (and for the moment will remain so for\n// backwards compatibility), but that interferes with treeshaking, so we also export it separately\n// here.\n//\n// Previously we expected users to import tracing integrations like\n//\n// import { Integrations } from '@sentry/tracing';\n// const instance = new Integrations.BrowserTracing();\n//\n// This makes the integrations unable to be treeshaken though. To address this, we now have\n// this individual export. We now expect users to consume BrowserTracing like so:\n//\n// import { BrowserTracing } from '@sentry/tracing';\n// const instance = new BrowserTracing();\n//\n// For an example of of the new usage of BrowserTracing, see @sentry/nextjs index.client.ts\nexport { BrowserTracing, BROWSER_TRACING_INTEGRATION_ID } from './browser';\n\nexport { Span, spanStatusfromHttpCode } from './span';\n// eslint-disable-next-line deprecation/deprecation\nexport { SpanStatus } from './spanstatus';\nexport { Transaction } from './transaction';\nexport { instrumentOutgoingRequests, defaultRequestInstrumentationOptions } from './browser';\nexport { IdleTransaction } from './idletransaction';\nexport { startIdleTransaction } from './hubextensions';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean;\n\n// Guard for tree\nif (typeof __SENTRY_TRACING__ === 'undefined' || __SENTRY_TRACING__) {\n  // We are patching the global object with our hub extension methods\n  addExtensionMethods();\n}\n\nexport { addExtensionMethods };\n\nexport {\n  extractTraceparentData,\n  getActiveTransaction,\n  hasTracingEnabled,\n  stripUrlQueryAndFragment,\n  TRACEPARENT_REGEXP,\n} from './utils';\n","import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  ClientOptions,\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(\n  transaction: T,\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler'>,\n  samplingContext: SamplingContext,\n): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: 'explicitly_set' },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: 'inheritance' },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    __DEBUG_BUILD__ && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  __DEBUG_BUILD__ && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n","import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, Transaction } from '@sentry/types';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * TODO(v7): Reorganize these exports\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n */\nexport { TRACEPARENT_REGEXP, extractTraceparentData } from '@sentry/utils';\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(\n  maybeOptions?: Pick<Options, 'tracesSampleRate' | 'tracesSampler'> | undefined,\n): boolean {\n  const client = getCurrentHub().getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  const hub = maybeHub || getCurrentHub();\n  const scope = hub.getScope();\n  return scope && (scope.getTransaction() as T | undefined);\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n","/* eslint-disable max-lines */\nimport { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { Span, SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\nexport const DEFAULT_FINAL_TIMEOUT = 30000;\nexport const HEARTBEAT_INTERVAL = 5000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string,\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  /**\n   * Timer that tracks Transaction idleTimeout\n   */\n  private _idleTimeoutID: ReturnType<typeof setTimeout> | undefined;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished. This timer is started each time\n     * there are no active spans on this transaction.\n     */\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    /**\n     * The final value in ms that a transaction cannot exceed\n     */\n    private readonly _finalTimeout: number = DEFAULT_FINAL_TIMEOUT,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      __DEBUG_BUILD__ && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n\n    this._startIdleTimeout();\n    setTimeout(() => {\n      if (!this._finished) {\n        this.setStatus('deadline_exceeded');\n        this.finish();\n      }\n    }, this._finalTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      __DEBUG_BUILD__ &&\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus('cancelled');\n          __DEBUG_BUILD__ &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          __DEBUG_BUILD__ &&\n            logger.log(\n              '[Tracing] discarding Span since it happened after Transaction was finished',\n              JSON.stringify(span, undefined, 2),\n            );\n        }\n        return keepSpan;\n      });\n\n      __DEBUG_BUILD__ && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      __DEBUG_BUILD__ && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      __DEBUG_BUILD__ && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Cancels the existing idletimeout, if there is one\n   */\n  private _cancelIdleTimeout(): void {\n    if (this._idleTimeoutID) {\n      clearTimeout(this._idleTimeoutID);\n      this._idleTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Creates an idletimeout\n   */\n  private _startIdleTimeout(endTimestamp?: Parameters<IdleTransaction['finish']>[0]): void {\n    this._cancelIdleTimeout();\n    this._idleTimeoutID = setTimeout(() => {\n      if (!this._finished && Object.keys(this.activities).length === 0) {\n        this.finish(endTimestamp);\n      }\n    }, this._idleTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    this._cancelIdleTimeout();\n    __DEBUG_BUILD__ && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    __DEBUG_BUILD__ && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      __DEBUG_BUILD__ && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      __DEBUG_BUILD__ && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const endTimestamp = timestampWithMs() + this._idleTimeout / 1000;\n      this._startIdleTimeout(endTimestamp);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      __DEBUG_BUILD__ && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n      this.setStatus('deadline_exceeded');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    __DEBUG_BUILD__ && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, HEARTBEAT_INTERVAL);\n  }\n}\n\n/**\n * Reset transaction on scope to `undefined`\n */\nfunction clearActiveTransaction(hub: Hub): void {\n  const scope = hub.getScope();\n  if (scope) {\n    const transaction = scope.getTransaction();\n    if (transaction) {\n      scope.setSpan(undefined);\n    }\n  }\n}\n","/* eslint-disable max-lines */\nimport { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { getDomElement, getGlobalObject, logger, parseBaggageSetMutability } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_FINAL_TIMEOUT, DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { extractTraceparentData } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { addPerformanceEntries, startTrackingLongTasks, startTrackingWebVitals } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  RequestInstrumentationOptions,\n} from './request';\nimport { instrumentRoutingWithDefaults } from './router';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{ _reportAllChanges: boolean }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   *\n   * Default: undefined\n   */\n  _experiments?: Partial<{ enableLongTask: boolean }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  finalTimeout: DEFAULT_FINAL_TIMEOUT,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  _experiments: { enableLongTask: true },\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BROWSER_TRACING_INTEGRATION_ID;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _emitOptionsWarning?: boolean;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins)) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        __DEBUG_BUILD__ && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n\n    const { _metricOptions } = this.options;\n    startTrackingWebVitals(_metricOptions && _metricOptions._reportAllChanges);\n    if (this.options._experiments?.enableLongTask) {\n      startTrackingLongTasks();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n        );\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, finalTimeout } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? extractTraceDataFromMetaTags() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      ...(parentContextFromHeader && {\n        metadata: {\n          ...context.metadata,\n          ...parentContextFromHeader.metadata,\n        },\n      }),\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    if (finalContext.sampled === false) {\n      __DEBUG_BUILD__ &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = getGlobalObject() as WindowOrWorkerGlobalScope & { location: Location };\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n    );\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      addPerformanceEntries(transaction);\n      transaction.setTag(\n        'sentry_reportAllChanges',\n        Boolean(this.options._metricOptions && this.options._metricOptions._reportAllChanges),\n      );\n    });\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context data from `sentry-trace` and `baggage` <meta> tags.\n * @returns Transaction context data or undefined neither tag exists or has valid data\n */\nexport function extractTraceDataFromMetaTags(): Partial<TransactionContext> | undefined {\n  const sentrytraceValue = getMetaContent('sentry-trace');\n  const baggageValue = getMetaContent('baggage');\n\n  const sentrytraceData = sentrytraceValue ? extractTraceparentData(sentrytraceValue) : undefined;\n  const baggage = parseBaggageSetMutability(baggageValue, sentrytraceValue);\n\n  // TODO more extensive checks for baggage validity/emptyness?\n  if (sentrytraceData || baggage) {\n    return {\n      ...(sentrytraceData && sentrytraceData),\n      ...(baggage && { metadata: { baggage } }),\n    };\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\n","import { getGlobalObject, logger } from '@sentry/utils';\n\nimport { IdleTransaction } from '../idletransaction';\nimport { SpanStatusType } from '../span';\nimport { getActiveTransaction } from '../utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (global && global.document) {\n    global.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (global.document.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        __DEBUG_BUILD__ &&\n          logger.log(\n            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,\n          );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    __DEBUG_BUILD__ &&\n      logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","/* eslint-disable max-lines */\nimport { Measurements } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, logger } from '@sentry/utils';\n\nimport { IdleTransaction } from '../../idletransaction';\nimport { Transaction } from '../../transaction';\nimport { getActiveTransaction, msToSec } from '../../utils';\nimport { getCLS, LayoutShift } from '../web-vitals/getCLS';\nimport { getFID } from '../web-vitals/getFID';\nimport { getLCP, LargestContentfulPaint } from '../web-vitals/getLCP';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher';\nimport { observe, PerformanceEntryHandler } from '../web-vitals/lib/observe';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from '../web-vitals/types';\nimport { _startChild, isMeasurementValue } from './utils';\n\nconst global = getGlobalObject<Window>();\n\nfunction getBrowserPerformanceAPI(): Performance | undefined {\n  return global && global.addEventListener && global.performance;\n}\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\n/**\n * Start tracking web vitals\n */\nexport function startTrackingWebVitals(reportAllChanges: boolean = false): void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    if (performance.mark) {\n      global.performance.mark('sentry-tracing-init');\n    }\n    _trackCLS();\n    _trackLCP(reportAllChanges);\n    _trackFID();\n  }\n}\n\n/**\n * Start tracking long tasks.\n */\nexport function startTrackingLongTasks(): void {\n  const entryHandler: PerformanceEntryHandler = (entry: PerformanceEntry): void => {\n    const transaction = getActiveTransaction() as IdleTransaction | undefined;\n    if (!transaction) {\n      return;\n    }\n    const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n    const duration = msToSec(entry.duration);\n    transaction.startChild({\n      description: 'Main UI thread blocked',\n      op: 'ui.long-task',\n      startTimestamp: startTime,\n      endTimestamp: startTime + duration,\n    });\n  };\n\n  observe('longtask', entryHandler);\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS(): void {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  getCLS(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry as LayoutShift;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(reportAllChanges: boolean): void {\n  getLCP(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  }, reportAllChanges);\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): void {\n  getFID(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(transaction: Transaction): void {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  __DEBUG_BUILD__ && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  let responseStartTimestamp: number | undefined;\n  let requestStartTimestamp: number | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry: Record<string, any>) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        const resourceName = (entry.name as string).replace(global.location.origin, '');\n        _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n        break;\n      }\n      default:\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      __DEBUG_BUILD__ && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond',\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond',\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      __DEBUG_BUILD__ &&\n        logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'web.vitals',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      transaction.setMeasurement(\n        measurementName,\n        _measurements[measurementName].value,\n        _measurements[measurementName].unit,\n      );\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nexport function _addMeasureSpans(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description ?? event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function _addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction: Transaction): void {\n  const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n\n    if (isMeasurementValue(connection.downlink)) {\n      _measurements['connection.downlink'] = { value: connection.downlink, unit: '' }; // unit is empty string for now, while relay doesn't support download speed units\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction: Transaction): void {\n  if (_lcpEntry) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric, ReportHandler } from '../types';\n\nexport const bindReporter = (\n  callback: ReportHandler,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        metric.delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (metric.delta || prevValue === undefined) {\n          prevValue = metric.value;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v2-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || getGlobalObject<Window>().document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { PerformanceEventTiming, ReportHandler } from './types';\n\nexport const getFID = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  return getGlobalObject<Window>().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n","import { Span, SpanContext } from '@sentry/types';\n\nimport { Transaction } from '../../transaction';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n","/* eslint-disable max-lines */\nimport type { Baggage, Span } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  BAGGAGE_HEADER_NAME,\n  isInstanceOf,\n  isMatchingPattern,\n  mergeAndSerializeBaggage,\n} from '@sentry/utils';\n\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    getRequestHeader?: (key: string) => string;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string;\n    };\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    options.headers = addTracingHeaders(request, activeTransaction.getBaggage(), span, options);\n  }\n}\n\nfunction addTracingHeaders(\n  request: string | Request,\n  incomingBaggage: Baggage | undefined,\n  span: Span,\n  options: { [key: string]: any },\n): PolymorphicRequestHeaders {\n  let headers = options.headers;\n\n  if (isInstanceOf(request, Request)) {\n    headers = (request as Request).headers;\n  }\n\n  if (headers) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (typeof headers.append === 'function') {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      headers.append('sentry-trace', span.toTraceparent());\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      headers.append(BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headers.get(BAGGAGE_HEADER_NAME)));\n    } else if (Array.isArray(headers)) {\n      const [, headerBaggageString] = headers.find(([key, _]) => key === BAGGAGE_HEADER_NAME);\n      headers = [\n        ...headers,\n        ['sentry-trace', span.toTraceparent()],\n        [BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headerBaggageString)],\n      ];\n    } else {\n      headers = {\n        ...headers,\n        'sentry-trace': span.toTraceparent(),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        baggage: mergeAndSerializeBaggage(incomingBaggage, headers.baggage),\n      };\n    }\n  } else {\n    headers = { 'sentry-trace': span.toTraceparent(), baggage: mergeAndSerializeBaggage(incomingBaggage) };\n  }\n  return headers;\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (\n    !hasTracingEnabled() ||\n    (handlerData.xhr && handlerData.xhr.__sentry_own_request__) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n\n        const headerBaggageString =\n          handlerData.xhr.getRequestHeader && handlerData.xhr.getRequestHeader(BAGGAGE_HEADER_NAME);\n\n        handlerData.xhr.setRequestHeader(\n          BAGGAGE_HEADER_NAME,\n          mergeAndSerializeBaggage(activeTransaction.getBaggage(), headerBaggageString),\n        );\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n","import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    __DEBUG_BUILD__ && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: global.location.pathname,\n          op: 'navigation',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n"],"names":["$b2FA5","parcelRequire","initSentry","config","sentryDsn","Sentry","dsn","integrations","BrowserTracing","tracesSampleRate","debug","console","warn","options","_metadata","sdk","name","packages","version","$6tkLI","SDK_VERSION","$gb15v","init","$cdf53ffbe0e8d619$var$originalFunctionToString","static","this","id","__init","$cdf53ffbe0e8d619$export$da4704525c20ae79","setupOnce","Function","prototype","toString","args","context","$9pPZr","getOriginalFunction","apply","__initStatic","currentElem","elem","out","height","len","sepLength","length","nextStr","$c59a37ccee660e4e$var$_htmlElementAsString","keyAttrs","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","$hQGRd","isString","split","allowedAttrs","global","$kYlSe","getGlobalObject","document","location","href","oO","querySelector","selector","$f44a60e887a513b8$var$fallbackGlobalObject","$lCC1r","isNodeEnv","$parcel$global","window","self","global1","obj","$f44a60e887a513b8$export$256479dc0cea61c4","__SENTRY__","creator","$hZwIo","isBrowserBundle","Object","call","$b7Yz0","mod","require","request","dynamicRequire","module","moduleName","e","cwd","e1","__SENTRY_BROWSER_BUNDLE__","$cfe8898feb7fcfae$var$objectToString","wat","$cfe8898feb7fcfae$export$49034edbe6b62415","Error","$cfe8898feb7fcfae$var$isBuiltin","Event","Element","Boolean","then","$cfe8898feb7fcfae$export$53b83ca8eaab0383","base","_e","$924564ee15efcd82$var$DSN_REGEX","host","path","pass","port","projectId","protocol","publicKey","withPassword","$924564ee15efcd82$var$dsnFromComponents","components","from","match","exec","str","$9AR2t","SentryError","lastPath","slice","pop","projectMatch","$924564ee15efcd82$export$b892860177f70a30","__SENTRY_DEBUG__","component","$924564ee15efcd82$var$isValidProtocol","isNaN","parseInt","$924564ee15efcd82$var$validateDsn","constructor","message","logLevel","super","setPrototypeOf","$96c70a3552ff27c0$var$global","$96c70a3552ff27c0$var$handlers","$96c70a3552ff27c0$var$instrumented","$96c70a3552ff27c0$var$instrument","type","$3PNWS","CONSOLE_LEVELS","level","fill","originalConsoleMethod","$96c70a3552ff27c0$var$triggerHandlers","$96c70a3552ff27c0$var$instrumentConsole","triggerDOMHandler","bind","globalDOMEventHandler","$96c70a3552ff27c0$var$makeDOMEventHandler","addEventListener","target","proto","hasOwnProperty","originalAddEventListener","listener","handlers","__sentry_instrumentation_handlers__","handlerForType","refCount","handler","originalRemoveEventListener","undefined","keys","$96c70a3552ff27c0$var$instrumentDOM","xhrproto","XMLHttpRequest","originalOpen","xhr","url","xhrInfo","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","endTimestamp","Date","now","startTimestamp","onreadystatechange","original","readyStateArgs","originalSend","body","$96c70a3552ff27c0$var$instrumentXHR","$dVGbB","supportsNativeFetch","originalFetch","handlerData","fetchData","$96c70a3552ff27c0$var$getFetchMethod","$96c70a3552ff27c0$var$getFetchUrl","response","error","$96c70a3552ff27c0$var$instrumentFetch","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","$96c70a3552ff27c0$var$lastHref","to","String","history","$96c70a3552ff27c0$var$instrumentHistory","$96c70a3552ff27c0$var$_oldOnErrorHandler","onerror","msg","line","column","arguments","$96c70a3552ff27c0$var$_oldOnUnhandledRejectionHandler","onunhandledrejection","logger","callback","data","$96peW","getFunctionName","fetchArgs","isInstanceOf","Request","$96c70a3552ff27c0$var$debounceTimerID","$96c70a3552ff27c0$var$lastCapturedEvent","globalListener","event","isContentEditable","$96c70a3552ff27c0$var$shouldSkipDOMEvent","previous","current","$96c70a3552ff27c0$var$shouldShortcircuitPreviousDebounce","clearTimeout","setTimeout","$2cace1425a64d825$var$global","originalConsole","wrappedLevels","$2cace1425a64d825$export$2a2b1d2252a69ecb","originalWrappedFunc","__sentry_original__","$2cace1425a64d825$var$makeLogger","enabled","enable","disable","$2cace1425a64d825$export$cda52e2a8927a2ca","$2cace1425a64d825$export$af88d00dbe7f521","getGlobalSingleton","source","wrapped","replacementFactory","$6daec6f8875c4198$export$5c1499e2e5d010ae","_Oo","defineProperty","value","writable","configurable","$6daec6f8875c4198$export$e73679ffaf56810e","func","object","encodeURIComponent","isError","stack","$6daec6f8875c4198$var$getOwnProperties","isEvent","newObj","$6daec6f8875c4198$var$serializeEventTarget","currentTarget","CustomEvent","detail","isElement","$gXPE6","htmlTreeAsString","extractedProps","property","$6daec6f8875c4198$export$62ff257738bf57f5","exception","sort","maxLength","$fv6zB","truncate","includedKeys","serialized","$6daec6f8875c4198$var$_dropUndefinedKeys","inputValue","Map","memoizationMap","isPlainObject","memoVal","get","returnValue","set","Array","isArray","item","max","substr","newLine","lineLength","colno","start","Math","end","min","input","output","delimiter","isRegExp","pattern","test","indexOf","$6a0840b9362e0802$var$defaultFunctionName","lhs","rhsFn","lastAccessLHS","ops","op","fn","Headers","Response","$a24152872fdcb100$export$edf3cb81fd7d2a3e","$a24152872fdcb100$export$18cf36ed71d733e7","fetch","result","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","err","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","pushState","replaceState","crypto","msCrypto","randomUUID","replace","getRandomByte","getRandomValues","Uint8Array","random","c","$72799488d8ba0f0d$var$getFirstException","values","event_id","eventId","firstException","currentMechanism","mechanism","handled","newMechanism","mergedData","__sentry_captured__","addNonEnumerableProperty","maybeArray","$0eb23b08674088a1$export$588732934346abbf","depth","maxProperties","ERROR","maxSize","normalized","$0eb23b08674088a1$export$a3295358bff77e","encodeURI","$0eb23b08674088a1$var$utf8Length","JSON","stringify","$0eb23b08674088a1$export$23fbbb20bed71033","Infinity","memo","$2k8Jb","memoBuilder","memoize","unmemoize","includes","stringified","_events","isSyntheticEvent","getPrototypeOf","$0eb23b08674088a1$var$stringifyValue","startsWith","valueWithToJSON","toJSON","numAdded","visitable","convertToPlainObject","visitKey","visitValue","hasWeakSet","WeakSet","inner","has","add","delete","splice","buffer","remove","task","$","taskProducer","limit","$e3FFC","rejectedSyncPromise","timeout","SyncPromise","resolve","reject","counter","capturedSetTimeout","resolvedSyncPromise","$a3c1ab5577f49459$var$States","$a3c1ab5577f49459$export$6f292d4960313241","_","reason","States","_state","PENDING","__init2","_handlers","onfulfilled","onrejected","_executeHandlers","catch","val","finally","onfinally","isRejected","__init3","_resolve","_setResult","RESOLVED","__init4","_reject","REJECTED","__init5","state","isThenable","_value","__init6","cachedHandlers","executor","$84efb0d8e2243fed$export$411d0ffdba845b6c","dateTimestampSource","nowSeconds","platformPerformance","performance","getNodePerformance","getBrowserPerformance","timestampSource","timeOrigin","threshold","performanceNow","dateNow","timeOriginDelta","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","_browserPerformanceTimeOriginMode","matches","traceparent","$f8d22121446a8bb9$export$394a210812ba3012","parentSampled","traceId","parentSpanId","headers","items","envelope","newItem","envelopeItem","envelopeItemType","$fec00fb81882b310$var$encodeUTF8","textEncoder","TextEncoder","encode","envHeaders","parts","append","next","itemHeaders","payload","buffers","totalLength","reduce","acc","buf","merged","offset","$fec00fb81882b310$var$concatBuffers","attachment","dropUndefinedKeys","filename","content_type","contentType","attachment_type","attachmentType","$fec00fb81882b310$var$ITEM_TYPE_TO_DATA_CATEGORY_MAP","session","sessions","transaction","client_report","user_report","discarded_events","timestamp","clientReportItem","$luQpY","dateTimestampInSeconds","$lS1PA","createEnvelope","limits","category","all","$d2b7bc23ab376493$export$b89fc7b2e4c799e7","statusCode","updatedRateLimits","rateLimitHeader","retryAfterHeader","trim","retryAfter","categories","headerDelay","delay","header","headerDate","parse","$d2b7bc23ab376493$export$615352e17ed7741","initItems","baggageString","mutable","baggage","inputBaggageValue","includeThirdPartyEntries","$3a6ed0a9f1b602ce$export$1034a425c7384452","entry","$3a6ed0a9f1b602ce$export$eb0401070c617ea5","baggageObj","curr","baggageKey","decodeURIComponent","incomingBaggage","thirdPartyBaggageHeader","headerBaggage","$3a6ed0a9f1b602ce$export$397de414d189db00","thirdPartyHeaderBaggage","prev","baggageEntry","newVal","$3a6ed0a9f1b602ce$export$42d6b35c33d40ea3","rawBaggageValue","sentryTraceHeader","$3a6ed0a9f1b602ce$export$dbc20483d8a38073","$3a6ed0a9f1b602ce$export$744e521d84c86d23","query","fragment","relative","$69a71bfa55034453$var$DEFAULT_IGNORE_ERRORS","$69a71bfa55034453$export$2ffbb5359dcc6be4","addGlobalEventProcessor","getCurrentHub","eventProcess","hub","getIntegration","client","getClient","clientOptions","getOptions","internalOptions","allowUrls","denyUrls","ignoreErrors","ignoreInternal","$69a71bfa55034453$export$6620a151868b99aa","_options","$69a71bfa55034453$var$_isSentryError","$9Plx7","getEventDescription","$69a71bfa55034453$var$_getPossibleEventMessages","some","isMatchingPattern","$69a71bfa55034453$var$_isIgnoredError","$69a71bfa55034453$var$_getEventFilterUrl","$69a71bfa55034453$var$_isDeniedUrl","$69a71bfa55034453$var$_isAllowedUrl","$69a71bfa55034453$export$3c6361fddf6cd929","frames","stacktrace","frame","$69a71bfa55034453$var$_getLastValidUrl","scope","newScope","$abefe93b5901da97$export$775b6bb06e53a214","_breadcrumbs","_tags","_extra","_contexts","_user","_level","_span","_session","_transactionName","_fingerprint","_eventProcessors","_requestSession","_attachments","addScopeListener","_scopeListeners","addEventProcessor","setUser","user","$f3VIE","updateSession","_notifyScopeListeners","getUser","getRequestSession","setRequestSession","requestSession","setTags","tags","setTag","setExtras","extras","setExtra","extra","setFingerprint","fingerprint","setLevel","setTransactionName","setContext","setSpan","span","getSpan","getTransaction","setSession","getSession","update","captureContext","updatedScope","contexts","clear","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","clearBreadcrumbs","addAttachment","getAttachments","clearAttachments","applyToEvent","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","sdkProcessingMetadata","_sdkProcessingMetadata","_notifyEventProcessors","$abefe93b5901da97$var$getGlobalEventProcessors","setSDKProcessingMetadata","newData","processors","index","processor","log","final","_notifyingListeners","arrayify","concat","startingTime","timestampInSeconds","sid","uuid4","started","duration","errors","ignoreDuration","toISOString","did","attrs","release","environment","ip_address","ipAddress","user_agent","userAgent","$af73e8a3c8457bc5$var$sessionToJSON","$af73e8a3c8457bc5$export$531818e825e774db","email","username","$7115d98abc1f5b59$var$DEFAULT_BREADCRUMBS","_stack","isOlderThan","_version","bindClient","getStackTop","setupIntegrations","pushScope","$eLdtN","Scope","clone","getScope","getStack","popScope","withScope","captureException","_lastEventId","syntheticException","_withClient","originalException","captureMessage","captureEvent","lastEventId","beforeBreadcrumb","finalBreadcrumb","consoleSandbox","configureScope","run","oldHub","$7115d98abc1f5b59$export$4188a14ad302d1bc","integration","startTransaction","customSamplingContext","_callExtensionMethod","traceHeaders","captureSession","endSession","_sendSessionUpdate","layer","closeSession","startSession","navigator","makeSession","currentSession","shouldSendDefaultPii","sendDefaultPii","sentry","$7115d98abc1f5b59$export$19eade501500c6c1","extensions","$7115d98abc1f5b59$export$8c41bb232f1008b1","carrier","registry","$7115d98abc1f5b59$export$bfa8a924a84a76b7","$7115d98abc1f5b59$export$849f05434e95d2f2","$7115d98abc1f5b59$var$hasHubOnCarrier","activeDomain","domain","active","registryHubTopStack","$7115d98abc1f5b59$var$getHubFromActiveDomain","$9HWWm","$267a2e51bcab860e$var$getBaseApiEndpoint","tunnelOrOptions","tunnel","sdkInfo","$267a2e51bcab860e$var$_getIngestEndpoint","urlEncode","sentry_key","sentry_version","sentry_client","$267a2e51bcab860e$var$_encodedAuth","dsnLike","dialogOptions","$cyB2I","makeDsn","endpoint","encodedOptions","dsnToString","$a1eaa5d4871f8c94$var$ALREADY_SEEN_ERROR","_integrations","_integrationsInitialized","_numProcessing","_outcomes","checkOrSetAlreadyCaught","_process","eventFromException","_captureEvent","promisedEvent","isPrimitive","eventFromMessage","_isEnabled","sendSession","getDsn","_dsn","getTransport","_transport","flush","transport","_isClientDoneProcessing","clientFinished","transportFlushed","close","$99LyF","getIntegrationById","integrationId","sendEvent","env","$jaP8A","createEventEnvelope","attachments","addItemToEnvelope","createAttachmentEnvelopeItem","transportOptions","_sendEnvelope","createSessionEnvelope","recordDroppedEvent","sendClientReports","_updateSessionFromEvent","crashed","errored","exceptions","ex","sessionNonTerminal","Number","ticked","interval","setInterval","clearInterval","_prepareEvent","normalizeDepth","normalizeMaxBreadth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","evt","_normalizeEvent","maxBreadth","b","$1ge6T","normalize","spans","dist","maxValueLength","integrationsArray","_processEvent","finalEvent","sentryError","beforeSend","sampleRate","isTransaction","__sentry__","rv","nullErr","$a1eaa5d4871f8c94$var$_ensureBeforeSendRv","processedEvent","promise","send","_clearOutcomes","outcomes","quantity","$a1eaa5d4871f8c94$export$4f22f74eddb7716a","$3iOru","getEnvelopeEndpointWithUrlEncodedAuth","$df569e5454937c2d$var$getSdkMetadataForEnvelopeHeader","metadata","envelopeHeaders","sent_at","eventType","transactionSampling","samplingMethod","rate","$df569e5454937c2d$var$enhanceEventWithSdkInfo","dynamicSamplingContext","$512ht","getSentryBaggageItems","$df569e5454937c2d$var$createEventEnvelopeHeaders","eventItem","sample_rates","$6aa9d85b69328e67$var$filterDuplicates","every","accIntegration","defaultIntegrations","userIntegrations","userIntegration","integrationsNames","alwaysLastToRun","integrationIndex","$6aa9d85b69328e67$export$b14a8888f80a0b3e","clientClass","initialScope","makeRequest","$8g0Iu","makePromiseBuffer","bufferSize","rateLimits","filteredEnvelopeItems","forEachEnvelopeItem","envelopeItemDataCategory","envelopeItemTypeToDataCategory","$i5E16","isRateLimited","filteredEnvelope","recordEnvelopeLoss","serializeEnvelope","updateRateLimits","drain","$415449f578c5e686$export$204155decbc90e5a","_installFunc","$415449f578c5e686$var$_installGlobalOnErrorHandler","$415449f578c5e686$var$_installGlobalOnUnhandledRejectionHandler","stackTraceLimit","installFunc","$cWAh5","addInstrumentationHandler","stackParser","attachStacktrace","$415449f578c5e686$var$getHubAndOptions","$9pNRk","shouldIgnoreOnError","ERROR_TYPES_RE","isErrorEvent","groups","$415449f578c5e686$var$_enhanceEventWithInitialFrame","$415449f578c5e686$var$_eventFromIncompleteOnError","$60rzy","eventFromUnknownInput","$415449f578c5e686$var$addMechanismAndCapture","ev","ev0","ev0s","ev0sf","lineno","getLocationHref","function","in_app","addExceptionMechanism","$45f82180115bc00f$export$d478b2c12fbcfdda","$45f82180115bc00f$var$extractMessage","$45f82180115bc00f$export$a6c2d27607295951","popSize","framesToPop","$45f82180115bc00f$var$reactMinifiedRegexp","$45f82180115bc00f$var$getPopSize","$45f82180115bc00f$export$9dd56ed1ef0c3420","$45f82180115bc00f$export$47d86ae4b3c9994","isUnhandledRejection","$45f82180115bc00f$export$73fbea5a0a5234af","isDOMError","isDOMException","domException","addExceptionTypeValue","code","extractExceptionKeysForMessage","__serialized__","normalizeToSize","$45f82180115bc00f$export$a6a5dd73e489caf","synthetic","$6dad1fd3dccf73ac$var$ignoreOnError","before","wrapper","__sentry_wrapped__","sentryWrapped","wrappedArguments","arg","$6dad1fd3dccf73ac$export$4997ffc0176396a6","$6dad1fd3dccf73ac$export$1265a142ff5ba165","$as5dG","markFunctionWrapped","getOwnPropertyDescriptor","_oO1","$c4910a1fb93e176d$var$DEFAULT_EVENT_TARGET","$c4910a1fb93e176d$export$f1a018517668e6d3","$c4910a1fb93e176d$var$_wrapTimeFunction","requestAnimationFrame","$c4910a1fb93e176d$var$_wrapRAF","$c4910a1fb93e176d$var$_wrapXHR","eventTargetOption","eventTarget","$c4910a1fb93e176d$var$_wrapEventTarget","originalCallback","wrap","prop","wrapOptions","originalFunction","eventName","handleEvent","wrappedEventHandler","originalEventHandler","$4e68454d2750c019$export$6d0f6df16bece7bf","$4e68454d2750c019$export$2dc68d50d56fbbd","$4e68454d2750c019$var$_consoleBreadcrumb","dom","_innerDomBreadcrumb","serializeAttribute","$4e68454d2750c019$var$_domBreadcrumb","$4e68454d2750c019$var$_xhrBreadcrumb","$4e68454d2750c019$var$_fetchBreadcrumb","$4e68454d2750c019$var$_historyBreadcrumb","$bpCeQ","severityLevelFromString","safeJoin","parsedLoc","$7KgVp","parseUrl","parsedFrom","parsedTo","$d54075fc0c437d47$export$8d1e60aaf616fb4f","parser","linkedErrors","$d54075fc0c437d47$export$e4e3ecf6f8f76c75","$d54075fc0c437d47$export$7bd713d0612d8839","_key","_limit","exceptionFromError","$ade281744afffe4e$var$global","$ade281744afffe4e$export$5d2ee9a544b09a94","referrer","Referer","$02c793d6a81e9a98$export$688d98c249d31ad3","eventProcessor","currentEvent","previousEvent","currentMessage","previousMessage","$02c793d6a81e9a98$var$_isSameFingerprint","$02c793d6a81e9a98$var$_isSameStacktrace","$02c793d6a81e9a98$var$_isSameMessageEvent","previousException","$02c793d6a81e9a98$var$_getExceptionFromEvent","currentException","$02c793d6a81e9a98$var$_isSameExceptionEvent","$02c793d6a81e9a98$var$_shouldDropEvent","_previousEvent","currentFrames","$02c793d6a81e9a98$var$_getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","$ksfYe","InboundFilters","FunctionToString","$gSjMX","TryCatch","$6JmkP","Breadcrumbs","$5BKfW","GlobalHandlers","$ij8km","LinkedErrors","$eNkPV","Dedupe","$eVAfn","HttpContext","$bc6e84734e6dfe2e$export$5ef831fccfce35e5","SENTRY_RELEASE","autoSessionTracking","stackParserFromStackParserOptions","$j07kb","defaultStackParser","getIntegrationsToSetup","supportsFetch","$kRMZJ","makeFetchTransport","$b5jwc","makeXHRTransport","$cO4vR","initAndBind","$96HEs","BrowserClient","$bc6e84734e6dfe2e$var$startSessionOnHub","$bc6e84734e6dfe2e$var$startSessionTracking","$6a1688e42af5ddcf$var$globalObject","breadcrumbIntegration","BREADCRUMB_INTEGRATION_ID","platform","_flushOutcomes","$cQrF4","createClientReportEnvelope","$dgz8S","sendReport","visibilityState","$9a88077b8eeacb1f$var$global","$9a88077b8eeacb1f$var$cachedFetchImpl","isNativeFetch","fetchImpl","sendBeacon","$9a88077b8eeacb1f$export$8be2119ce08e3379","credentials","keepalive","$dd53b2e45c0bbf3f$var$UNKNOWN_FUNCTION","$dd53b2e45c0bbf3f$var$createFrame","$dd53b2e45c0bbf3f$var$chromeRegex","$dd53b2e45c0bbf3f$var$chromeEvalRegex","$dd53b2e45c0bbf3f$var$geckoREgex","$dd53b2e45c0bbf3f$var$geckoEvalRegex","$dd53b2e45c0bbf3f$var$winjsRegex","subMatch","$dd53b2e45c0bbf3f$var$extractSafariExtensionDetails","isSafariExtension","isSafariWebExtension","nativeFetch","getNativeFetchImplementation","$hCAEN","createTransport","requestOptions","referrerPolicy","fetchOptions","getResponseHeader","open","setRequestHeader","__SENTRY_TRACING__","$9SmQW","addExtensionMethods","toTraceparent","sample","samplingContext","$9PkZ6","hasTracingEnabled","sampled","setMetadata","tracesSampler","isValidSampleRate","_startTransaction","transactionContext","$kLhf0","Transaction","initSpanRecorder","_experiments","maxSpans","idleTimeout","finalTimeout","onScope","$geAhT","IdleTransaction","getMainCarrier","packageToIntegrationMapping","mongodb","Mongo","mongoose","mysql","Mysql","pg","Postgres","mappedPackages","loadModule","pkg","p","_autoloadDatabaseIntegrations","$dgzaz","registerErrorInstrumentation","$9a880cecc5bd4889$var$errorCallback","activeTransaction","getActiveTransaction","setStatus","maybeOptions","maybeHub","time","spanId","transactionSpanId","finish","timestampWithMs","_popActivity","_pushActivity","maxlen","activities","_heartbeatCounter","_finished","_beforeFinishCallbacks","spanRecorder","keepSpan","_onScope","$bd1a1a1bd7dcbeb1$var$clearActiveTransaction","_idleHub","registerBeforeFinishCallback","$bd1a1a1bd7dcbeb1$export$370d6113c18ba86c","_pingHeartbeat","_cancelIdleTimeout","_idleTimeoutID","_startIdleTimeout","_idleTimeout","_beat","heartbeatString","_prevHeartbeatString","$bd1a1a1bd7dcbeb1$export$68a507a5e6cb6de5","_finalTimeout","$bd1a1a1bd7dcbeb1$export$a9bb9f6cf9cd1d42","$bd1a1a1bd7dcbeb1$export$b279e6bd7040371f","$16425df906a93241$var$DEFAULT_BROWSER_TRACING_OPTIONS","$8de317ef1dd5750d$var$global","statusType","$730b817e52536a45$var$global","$730b817e52536a45$var$getBrowserPerformanceAPI","$730b817e52536a45$var$_lcpEntry","$730b817e52536a45$var$_clsEntry","$730b817e52536a45$var$_performanceCursor","$730b817e52536a45$var$_measurements","reportAllChanges","$730b817e52536a45$var$_addPerformanceNavigationTiming","metric","$8o1PL","initMetric","report","sessionValue","sessionEntries","entryHandler","hadRecentInput","firstSessionEntry","lastSessionEntry","startTime","entries","po","$fUf4e","observe","$jsrMX","bindReporter","onReport","$82gM1","onHidden","takeRecords","prevValue","forceReport","delta","floor","PerformanceObserver","supportedEntryTypes","l","getEntries","buffered","onHiddenOrPageHide","cb","once","removeEventListener","visibilityWatcher","$2wbpv","getVisibilityWatcher","firstHiddenTime","processingStart","disconnect","$1d576bc4f78ba080$var$firstHiddenTime","timeStamp","$71bc1c6965f67760$var$reportedMetricIDs","stopListening","capture","isFinite","startChild","ctx","traceFetch","traceXHR","tracingOrigins","shouldCreateSpanForRequest","$565402195f075bb8$export$cc17fb3c0bc95cd7","urlMap","defaultShouldCreateSpan","origins","origin","shouldCreateSpan","__span","setHttpStatus","description","BAGGAGE_HEADER_NAME","mergeAndSerializeBaggage","headerBaggageString","find","$565402195f075bb8$var$addTracingHeaders","getBaggage","$565402195f075bb8$export$cd8846dd8ea4bd7a","__sentry_xhr_span_id__","getRequestHeader","$565402195f075bb8$export$49680d91e75e2ef7","$d8993b656d569f7e$var$global","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","pathname"],"version":3,"file":"initSentry.9a7fb051.js.map"}